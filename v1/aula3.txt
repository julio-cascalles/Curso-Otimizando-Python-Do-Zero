Olá!

Nesta aula, a gente vai criar duas classes
que misturam os dados que a gente definiu
no arquivo "base.py" com o acesso
ao banco de dados MongoDB através
da classe MongoTable.

A primeira classe é a Empresa que você
criar no arquivo empresa.py
Então crie esse arquivo e depois edite ele assim:
Na parte de cima, importe o "base.py" que a gente fez,
com o comando `from modelos import base`
(/modelos é pasta onde a gente colocou o arquivo)

Em seguida, faça o mesmo para importar MongoTable --
-- Então o comando fica assim:
`from modelos.mongo_table import MongoTable`

Repare que, diferente do primeiro import onde o
arquivo "base" é importado INTEIRO
a segunda linha de import fala para importar do
arquivo mongo_table -- dentro de modelos -- somente
a classe MongoTable.

Deixe duas linhas em branco, apertando ENTER 2 vezes.
Esse espaçamento é uma regra de estilo do python
que padroniza para deixar o código legível.

Então você escreve `class Historico`
Mas agora, em vez de uma classe pai
vai ter DUAS:
    * A primeira é base.Historico, que contém
        a definição dos dados;
    * A segunda é MongoTable para levar esses
        dados para o banco de dados MongoDB.

Dentro da classe, por enquanto, não vai ter nada.
No python quando a gente define uma classe ou função
VAZIA a gente coloca a palavra-chave `pass`

Salve o arquivo, selecione TUDO e copie.
Aí você cria outro arquivo, chamado "Historico"
e cola o código que você copiou, só mudando o nome da
classe para Historico.
Salve esse arquivo também.

Agora, fora da pasta modelos -- ou seja, na raiz da 
pasta "v1" você vai criar um arquivo de testes
unitários chamado "test_main.py"

Para esse arquivo de testes, a gente vai usar
a biblioteca "pytest" -- Então se você ainda
não tem ela instalada no seu computador, vá até o terminal
e digite << `pip install pytest`>>

De volta ao arquivo de testes, você vai
escrever `import pytest`
e, embaixo, as linhas de import para MongoTable
e para a classe Empresa que acabamos de criar.

Então fica assim:
import pytest
...depois...
from modelos.mongo_table import MongoTable
(como a gente fez antes)
...e...
<<from modelos.empresa import Empresa>>

Aperte ENTER e vamos criar uma `constante`
chamada <<ID_EMPRESA_TESTE>> contendo uma
string com vários zeros..

Pule uma linha e escreva
@pytest.mark.skip --- isso é um DECORATOR
que avisa ao pytest para não executar essa função
automaticamente.
Entre parênteses, coloque no decorator,
o parâmetro reason="Carregando dados de teste"

Embaixo vai ficar a função **<grava_dados>**
Essa função é executada antes dos testes
para preparar o ambiente com os dados
que serão usados nos testes

Como você já deve saber, para definir uma função
escreva a palavra-chave "def" seguido do nome da função
e a lista de parâmetros. [Assim...<mostra como fazer>]
No final coloque o sinal de "dois-pontos"
e pressione ENTER -- Seu editor já deve ajustar
a tabulação para indicar que você está dentro da função.

A primeira coisa que essa função faz
é definir qual banco de dados ela está usando:
Dentro do MongoDB você pode ter vários bancos de dados.
No nosso caso, ele vai chamar '''teste'''

Na linha de baixo, você vai criar uma empresa
fictícia: Escreva o nome da classe "Empresa"
com um parênteses e em cada linha abaixo, um parâmetro,
começando com o id: Coloque um sinal de igual
para atribuir o ID_EMPRESA_TESTE

Nas outras linhas vai ter o nome que você pode colocar
o que quiser (eu coloquei "Companhia ABC")
e então vem os valores: O <capital> vai ser
de 123456 -- Note que dá pra separar milhar
com o sublinhado no python.
Depois, o último parâmetro é "cota" com valor de 7890.

Feche o parênteses -- se já não estiver
fechado -- e escreva ".save()" [abre e fecha parênteses]

...Se tudo der certo, isso vai gravar uma empresa
com esses dados no MongoDB

Perceba que todo o corpo da função ficou deslocado uma
tabulação ou mais. Agora você pressiona ENTER e BACKSPACE
para indicar ao python que a função acabou.
E, a próxima linha vai fazer o chamado dessa função:
...Basta escrever o nome dela seguido de parênteses.

Vamos criar mais duas funções:
Ambas vão começar com o prefixo
test_ (sublinhado) que indica
ao pytest que isso é um testes
unitário que tem que ser avaliado.

A primeiroa é test_capital_empresa
Vamos criar uma variável para buscar
os dados da empresa criada em "grava_dados"
Para isso escreva o nome da variável, que é "dados",
o sinal de igual para indicar atribuição, 
a classe da Empresa e um ponto para indicar
algo que pertence à classe -- neste caso é o método
find: 

... Ou seja você está dizendo para
buscar (find) todas as empresas cujos campos
coincidem com os parâmetros que vc vai passar.
O parâmetro aqui é o <id> e vamos usar
como valor desse parâmetro a constante ID_EMPRESA_TESTE
* >> Como o find vai retornar uma lista de resultados,
mas nós só queremos o primeiro, vamos usar a notação
de lista que seleciona só o índice zero -- ou seja
o primeiro resultado -- através dos colchetes e o zero dentro.

A última linha da função é onde vamos testar
se o campo capital está conforme o esperado.
Escreva a palavra-chave "assert" e faça a comparação
entre dados.capital com 123_456
(Para comparar se algo é igual a gente usa ==
["igual igual"] dese jeito...)

Termine a função e crie a próxima, chamada 
"test_cotas_empresa". Copie a busca de dados
que usou na função "test_capital_empresa"
depois faça um <assert> para dados.cota == 7890

Pronto! A versão "v1" está pronta para testar.
Você vai abrir o terminal na pasta raiz do projeto.
Do lado de fora da pasta v1, você vai dar o 
seguinte comando:
    >> `pytest v1`

...Ele vai executar os dois testes (test_capital_empresa
e test_cotas_empresa). Então ele vai mostrar se deu
certo.

Se der algum erro você precisa:
* Primeiro ler a mensagem de erro;
* Identificar se é um problema de conexão 
    -- E aí, nesse caso, deve refazer os passos
        para configurar e acessar o banco de dados
* Se for um erro de programação, investigar qual arquivo
    e qual trecho está com problema -- e qual tipo de problema
    (Pode ser, por exemplo, que vc digitou algo errado,
    ou que esqueceu de um import
    ou que falta algo no seu ambiente de trabalho)
Caso o problema persistir, consulte o código na última versão
para comparar com o seu -- no meu repositório
https://github.com/julio-cascalles/Curso-Otimizando-Python-Do-Zero


